{"version":3,"file":"index.js","sources":["../src/auth.js","../src/connection.js","../src/index.js"],"sourcesContent":["const request = require('request-promise')\r\nconst timeout = (fn, s) => {\r\n  return new Promise(resolve => setTimeout(() => resolve(fn()), s))\r\n}\r\n\r\n/**\r\n * Handles authorization on blitz auth-node and token handling via HTTP\r\n */\r\nclass Auth {\r\n  constructor (options) {\r\n    this.options = options\r\n    this.authRetryCount = 0\r\n  }\r\n\r\n  /**\r\n   * Get tokens for API authentication if credentials provided\r\n   */\r\n  async authorize () {\r\n    if (this.options.user_key && this.options.user_secret) {\r\n      return this.getToken()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refresh tokens if possible\r\n   */\r\n  async reauthorize () {\r\n    if (this.options.user_key && this.options.user_secret) {\r\n      return this.refreshToken()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Token via http on /auth\r\n   */\r\n  async getToken () {\r\n    // Set authentication options\r\n    let auth_request = {\r\n      user_key: this.options.user_key,\r\n      user_secret: this.options.user_secret\r\n    }\r\n\r\n    // Post Options\r\n    let post_options = {\r\n      method: 'post',\r\n      body: auth_request,\r\n      json: true\r\n    }\r\n\r\n    try {\r\n      let res = await request(this.options.auth_url + '/authenticate', post_options)\r\n      this.access_token = res.access_token\r\n      this.refresh_token = res.refresh_token\r\n    } catch (err) {\r\n      let t = err.error.reason ? parseInt(err.error.reason.replace(/[^0-9]+/g, '')) : 5000\r\n      await timeout(() => this.getToken(this.options.user_key, this.options.user_secret), t)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get new access token from refresh_token & save in object\r\n   */\r\n  async refreshToken () {\r\n    // Ensure only one refresh process is done at a time\r\n    if (!this.refreshing) {\r\n      this.refreshing = true\r\n\r\n      // Set authentication options\r\n      let auth_request = {\r\n        refresh_token: this.refresh_token\r\n      }\r\n\r\n      // Post Options\r\n      let post_options = {\r\n        method: 'post',\r\n        body: auth_request,\r\n        json: true\r\n      }\r\n\r\n      // Send to /auth endpoint\r\n      try {\r\n        let res = await request(this.options.auth_url + '/refresh', post_options)\r\n        this.access_token = res.access_token\r\n        this.refreshing = false\r\n      } catch (err) {\r\n        this.refreshing = false\r\n        let t = err.error.reason ? parseInt(err.error.reason.replace(/[^0-9]+/g, '')) : 5000\r\n        await timeout(() => this.refreshToken(), t)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Auth\r\n","import Auth from './auth.js'\r\nconst io = require('socket.io-client')\r\nconst request = require('request-promise')\r\nconst queue = require('async-delay-queue')\r\nconst timeout = (fn, s) => {\r\n  return new Promise(resolve => setTimeout(() => resolve(fn()), s))\r\n}\r\n\r\nclass Connection {\r\n  constructor (options) {\r\n    this.options = options\r\n    this.subscriptions = []\r\n    this.queue = queue\r\n    this.auth = new Auth(options)\r\n  }\r\n\r\n  /**\r\n   * Socket.io client with currently stored tokens\r\n   */\r\n  setClient () {\r\n    let sioConfig = this.auth.access_token ? {\r\n      query: 'bearer=' + this.auth.access_token\r\n    } : {}\r\n\r\n    // Connect to parent namespace\r\n    this.client = io.connect(this.options.api_url + this.options.namespace, sioConfig)\r\n    this.client.on('disconnect', () => {\r\n      this.reload()\r\n    })\r\n\r\n    // Resubscribe after disconnect\r\n    this.resub()\r\n\r\n    let httpConfig = this.auth.access_token ? {\r\n      headers: {\r\n        authorization: 'bearer ' + this.auth.access_token\r\n      }\r\n    } : {}\r\n    this.http = request.defaults(httpConfig)\r\n  }\r\n\r\n  /**\r\n   * Get Tokens and build client\r\n   */\r\n  async connect () {\r\n    await this.auth.authorize().then(() => this.setClient())\r\n  }\r\n\r\n  reload () {\r\n    if (!this.reconnecting) {\r\n      this.reconnecting = this.reconnect()\r\n    }\r\n    return this.reconnecting\r\n  }\r\n\r\n  /**\r\n   * Close existing connection and start new with available tokens\r\n   */\r\n  async reconnect () {\r\n    this.client.disconnect()\r\n    await this.auth.reauthorize()\r\n    this.client.io.opts.query = this.auth.access_token ? 'bearer=' + this.auth.access_token : null\r\n    this.client.connect()\r\n\r\n    // Modify http requests for new token\r\n    let httpConfig = this.auth.access_token ? {\r\n      headers: {\r\n        authorization: 'bearer ' + this.auth.access_token\r\n      }\r\n    } : {}\r\n\r\n    this.http = request.defaults(httpConfig)\r\n    this.client.once('connect', () => {\r\n      this.reconnecting = null\r\n    })\r\n\r\n    // Retry if server unreachable\r\n    await timeout(() => this.client.connected ? null : this.reload(), 5000)\r\n  }\r\n\r\n  /**\r\n   * Rejoin Socket.IO subscriptions after connection is lost\r\n   */\r\n  resub () {\r\n    this.client.on('subscribed', sub => {\r\n      if (!this.subscriptions.includes(sub)) this.subscriptions.push(sub)\r\n    })\r\n    this.client.on('connect', () => {\r\n      this.subscriptions.forEach(sub => this.client.emit('subscribe', sub))\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Send Request with Err Check\r\n   */\r\n  async request (verb, query) {\r\n    let delay = this.options.ignore_limiter ? 0 : 20\r\n    let res = await this.queue.delay(() => this.req(verb, query), delay)\r\n    return this.errCheck(res, verb, query)\r\n  }\r\n\r\n  /**\r\n   * Actual Request Code\r\n   */\r\n  async req (verb, query) {\r\n    if (this.options.use_socket) {\r\n      return new Promise(resolve => this.client.emit(verb, query, resolve))\r\n    }\r\n\r\n    // HTTP Request\r\n    else {\r\n      if (typeof query === 'string') {\r\n        query = {\r\n          url: query\r\n        }\r\n      }\r\n      let req_options = {\r\n        method: verb,\r\n        url: this.options.api_url + query.url,\r\n        body: query.body,\r\n        json: true\r\n      }\r\n      return this.http(req_options)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retry failed requests\r\n   */\r\n  async retry (res, verb, query) {\r\n    let delay = parseInt(res.body.reason.replace(/[^0-9]+/g, '')) || 500\r\n    let reres = await this.queue.delay(() => this.req(verb, query), delay, 30000, 'unshift')\r\n    return this.errCheck(reres, verb, query)\r\n  }\r\n\r\n  /**\r\n   * Handles Error Responses\r\n   */\r\n  async errCheck (res = {}, verb, query) {\r\n    // Response not 1xx, 2xx, 3xx?\r\n    if (res.body && parseInt(res.statusCode.toString()[0]) > 3) {\r\n      // If expired: Get new token w/ refresh token & retry method\r\n      if (typeof res.body === 'string' && res.body.includes('jwt expired')) {\r\n        await this.reload()\r\n        return this.request(verb, query)\r\n      }\r\n\r\n      // Error responses may need to be parsed additionally\r\n      try {\r\n        res.body = JSON.parse(res.body)\r\n      } catch (err) {}\r\n\r\n      // Rate Limited\r\n      if (res.body.error && res.body.error.includes('Rate limit') && !this.options.ignore_limiter) {\r\n        // Rejection due to frequency\r\n        if (res.body.reason.includes('Request intervals too close')) {\r\n          return this.retry(res, verb, query)\r\n        }\r\n\r\n        // Rejection due to empty token bucket\r\n        if (res.body.reason.includes('Max requests per interval reached')) {\r\n          return this.retry(res, verb, query)\r\n        }\r\n      }\r\n\r\n      // Nodes are busy -> retry\r\n      else if (res.statusCode === 503) {\r\n        return this.request(verb, query)\r\n      }\r\n\r\n      // Unhandled error\r\n      else {\r\n        return res\r\n      }\r\n    }\r\n\r\n    // No Error\r\n    else {\r\n      return this.parse(res)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Try to JSON parse the response automatically for convenience\r\n   */\r\n  parse (res) {\r\n    // Is JSON\r\n    try {\r\n      return JSON.parse(res.body)\r\n    }\r\n    // Not JSON, keep original value\r\n    catch (e) {\r\n      return res.body\r\n    }\r\n  }\r\n}\r\n\r\nexport default Connection\r\n","import Connection from './connection.js'\r\n\r\nclass Blitz {\r\n  /**\r\n   * Merge default options with client options\r\n   */\r\n  constructor (options) {\r\n    this.connecting = null\r\n    this.options = Object.assign({\r\n\r\n      // Resource Config\r\n      api_url: 'http://localhost:3010/',\r\n      auth_url: 'http://localhost:3030/',\r\n\r\n      // Connection Config\r\n      use_socket: true,\r\n      namespace: '/',\r\n\r\n      // Authorization Config\r\n      user_key: null,\r\n      user_secret: null,\r\n      ignore_limiter: false\r\n    }, options)\r\n\r\n    // Remove \"/\" from url's\r\n    let api = this.options.api_url\r\n    let auth = this.options.auth_url\r\n    this.options.api_url = api[api.length - 1] === '/' ? api.slice(0, -1) : api\r\n    this.options.auth_url = auth[auth.length - 1] === '/' ? auth.slice(0, -1) : auth\r\n    this.connect()\r\n  }\r\n\r\n  /**\r\n   * Connect by getting tokens and setting up clients\r\n   */\r\n  async connect () {\r\n    this.connection = new Connection(this.options)\r\n    this.connecting = this.connection.connect()\r\n    await this.connecting\r\n    this.connecting = null\r\n  }\r\n\r\n  /**\r\n   * Subscribe to certain endpoints\r\n   */\r\n  async subscribe (endpoint) {\r\n    await this.connecting\r\n    this.emit('subscribe', endpoint)\r\n  }\r\n\r\n  /**\r\n   * Event listening for socket.io\r\n   */\r\n  async on (ev, func) {\r\n    await this.connecting\r\n    this.connection.client.on(ev, func)\r\n  }\r\n\r\n  /**\r\n   * Expose Socket client emit\r\n   */\r\n  async emit (ev, data) {\r\n    await this.connecting\r\n    this.connection.client.emit(ev, data)\r\n  }\r\n\r\n  /**\r\n   * RESTful methods for manual interaction\r\n   */\r\n  async query (verb, query) {\r\n    await this.connecting\r\n    return this.connection.request(verb, query)\r\n  }\r\n\r\n  get (query) {\r\n    return this.query('GET', query)\r\n  }\r\n\r\n  post (url, body) {\r\n    let query = {\r\n      url: url,\r\n      body: body\r\n    }\r\n    return this.query('POST', query)\r\n  }\r\n\r\n  put (url, body) {\r\n    let query = {\r\n      url: url,\r\n      body: body\r\n    }\r\n    return this.query('PUT', query)\r\n  }\r\n\r\n  patch (url, body) {\r\n    let query = {\r\n      url: url,\r\n      body: body\r\n    }\r\n    return this.query('PATCH', query)\r\n  }\r\n\r\n  delete (url, body) {\r\n    let query = {\r\n      url: url,\r\n      body: body\r\n    }\r\n    return this.query('DELETE', query)\r\n  }\r\n}\r\n\r\nmodule.exports = Blitz\r\n"],"names":["request","require","timeout","fn","s","Promise","setTimeout","resolve","Auth","options","authRetryCount","user_key","user_secret","getToken","refreshToken","auth_request","auth_url","post_options","access_token","res","refresh_token","error","reason","parseInt","replace","t","refreshing","io","queue","Connection","subscriptions","auth","sioConfig","client","connect","api_url","namespace","on","reload","resub","httpConfig","http","defaults","authorize","then","setClient","reconnecting","reconnect","disconnect","reauthorize","opts","query","once","connected","includes","sub","push","forEach","emit","verb","ignore_limiter","delay","req","errCheck","use_socket","url","body","req_options","reres","statusCode","toString","JSON","parse","err","retry","e","Blitz","connecting","Object","assign","api","length","slice","connection","endpoint","ev","func","data","module","exports"],"mappings":"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"}